This document describes the inner workings of SetupHelper and Package Manager

You should read the ReadMe file describing basic operaiton first then come back
here if you are interested.

When I started writing modifications to Venus OS, I realized much of the chore of
installing these modifications was repeated for each file and each "package".
The redundancy was moved to a set of functions in SetupHelper/CommonResources.

For example, to modify one of the Venus OS files:
	it is necessary to identify the Venus OS version
	use that to select the appropriate replacement file
	move the original out of the way so it can be restored when the package is uninstalled
	then finally copy the repacement into position.

Venus OS is constanly changing, so replacement files need to be generated for each Venus version.
Doing so would be difficlut to maintain. But much is common from version to version.
One replacement applies to original files that match a prevous version.

Each package stores it's replacement files and a copy of the originals in "file sets".
During installation, SetupHelper finds the appropirate replacement for each file
and replaces the original file with that version.

If SetupHelper can't find appropriate replacements for a particular Venus OS version,
the install fails. It's necessary to update the package with one or more new replacemet files.

A package is stored in a directory of the same name as the package.
It must include:
	a version file
	a setup script
	the FileSets for all Venus OS versions
	additional programs, scripts and other resources
	a ReadMe
	"flag files" for:
		first and obsolete versions
		platform compatibility (right now a raspberryPiOnly flag)
		optionsRequied - indicating command-line options are required for install
			(more about this later)

To use SetupHelper, the script must be written to include CommonResources: 

#### following lines incorporate SetupHelper utilities into this script
# Refer to the SetupHelper ReadMe file for details.
    
source "/data/SetupHelper/CommonResources" 

#### end of lines to include SetupHelper

and then may use the functions it provides to install replacement files.


Reinstall after Venus OS update

A Venus firmware update overwrites any modifications.
It is therefore necessary to reinstall the modifications following the Venus update.
This reinstall is part of SetupHelper.

SetupHelper uses /data/rcS.local to run the reinstall for all packages
	because it is less likely to conflict with other Venus OS modifications.
	(These will most likely use /data/rc.local.)

/data/rcS.local is modified to include a call to /data/SetupHelper/reinstallMods but runs it as a separate background task
so rcS.local can return to the caller.

if /data/rcS.local already exists, SetupHelper ADDs the call to reinstallMods to the existing lines

reoinstallMods waits until dbus Settings are available in case the setup script needs those resources.


reinstallScriptsList is a list of setup scripts, one per line that will be called from reinstallMods.
It will call the setup script for each package if that package is not installed
or if the installed version differs from the one in the package directory.

reinstallScriptsList is hard-coded to reside in the /data directory.
This definition must match in CommonResources, and in reinstallMods
The file is created by the first setup script to add to it.

reinstallScriptsList should use full path names to avoid problems finding the script
Lines beginning with # or completely blank lines are ignored as is white space at begin and end

Previous versions of SetupHelper relied on a "reinstall" option in the reinstallScriptsList.
Recent changes ignore all options in the file and pass a preset set of options.

When called from reinstallMods:
1)    The setup script must not require user input since there will be no user interface
2)    The setup script should not reboot the system or restart the GUI directly
3)    The setup script should avoid reapplying the modifications.

reinstallMods tests the exit code of each setup script.
An exit code of EXIT_REBOOT signals that reinstallMods should reboot the system after all scripts have been run.
An exit code of EXIT_RESTART_GUI signals that reinstallMods should restart the GUI after all scripts have been run.

A "installedVersion" is used to make sure the automatic reinstallation occurs only once after a Venus OS update.
Installed flags are named installedVersion-<packageName> and  contain the package version that is actually installed.

The instlledVersion file contains the version that was last installed.
Absense of the installed verison file indicates the package is not currently installed.
This would occur if the package is manually removed or if a Venus OS firmware update occurs
	which restores the entire root file system.

Running the script manually should typically ignore instlledVersion,
but MUST create or remove it as appropriate to control future boot-time execution.

In order to trigger a reinstall, the location of instlledVersion files is in /etc/venus because
this location will be overwritten by a Venus OS update.

When at all possible, a setup script should be written so that it does not require interaction with the user.
If the script needs the user to input options on the first installation,
A automatic reinstall (after Venus OS update) or from Package Manager will not be able to install the package before setup is run from the command line.
In this case, the script should return with an exit code indicating this situation,
and should also include the optionsRequired flag file in the package's directory.

Options entered from the command line durning installation should be stored in /data/setupOpitons/<packageName>
This maintains the package options and allows a reinstall to use these options.
optionsSet is set after an installation is successful. This enables package reinstallation.

Package Manager uses the optionsRequired and options Set flag files to prevent installs. 

The setup script also needs to run unattended when called from reinstallMods during system boot,
and from Package Manager, at least after the initial install is done from the command line.
When run by a user, the scrit should prompt the user for needed options.


File Sets

As mentioned above, Venus OS is constantly making changes to its operating files. 
If a package modifies am file, for example to add a new menu item to the GUI,
it needs to take into account the content of the file prior to modificaiton.

The FileSets directory stores file sets: one directory per Venus OS version.

The fileList file in the FileSets direcotry is a list of each VERSION-DEPENDENT file in the package.

Version independent files are located in the FileSets directory, not in a version directory.

File sets provide versions of each modified file for each version of Venus OS that differs from the previous version.
For example, of PageMain.qml is the same for v2.3 through v2.7 but changes in v2.8
then a modified PageMain.qml is needed for v2.3 and another for v2.8. 
Installing on v2.7 would use the v2.3 PageMain.qml replacement.

Some files in a package may not be tied to specific Venus OS versions.
For example, if a service is added to the system, it will most likely be the same for all versions of Venus OS.
These files would not be located in a version file set but rather in the FileSets directory in the package.

In order to identify changed files, the original file for each replacement
must be compared against ALL versions of Venus OS.
When changes are detected, a new file set version directory needs to be created and
a new ...orig file copied from Venus OS.
This process runs on the computer managing the package, not on the GX device.

In order to run the necessary checks, key venus OS versions need to be available to the managing computer.
I use the raspberry Pi images from http://updates.victronenergy.com/feeds/venus/ because these contain
the compete file system.
Alternatively, the file system can be copied from a running GX device prior to installing any packages.
I create a directory on the managing computer called OriginalFiles,
then create a directory for each venus OS version: v2.81, v2.90~12, etc.
Next, I copy the /etc and /opt directories from the Venus OS image to the OriginalFiles/vX.Y~Z directory.
I limit OriginalFiles to /etc and /opt mainly to minimize storage space.
99% of the files likely to be modified by a package are loacated there.
This is an artifical limit and other parts of the file system may be included if needed.

The updateFileSets script included in the SetupHelper pacakge then runs through all OriginalFiles verison directories
and all package directories and creates skeleton file sets in each package. 
The comments at the top of that file provide additional details.
Note that this is a unix bash script and should run on all unis and Mac OS computers.
Windows will not run this script natively. However Windows 10 apparently supports bash:
https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/

Before running this script, you need to edit the FileSets/fileList file to include the
files your package will modify. Use full path names to avoid issues.

After running this script, you will find empty file sets populated with ...NO_REPLACEMENT files.
These indicate where you need to create replacement files for your packages.
You will need to add your changes to each replacement file in each file set.

Naming:
	the replacement file has the extension of the actual file, e.g., PageMain.qml
	the original file adds a .orig extension, e.g, PageMain.qml.orig
	if no original exists, an empty file with the .NO_ORIG file will be created,
		e.g., PageMain.qml.NO_ORIG

Existance of a .NO_ORIG file is after running updateFileSets indicates a significant problem.
What this sats is that the replacement file has no equivalent in a stock system.
If the replacement file is the same for all Venus OS versions, simply remove it from fileList
and place the replacement in the FileSets directory, not in a version directory.

However, if the replacement file differs between Venus OS versions,
an alternate original file needs to be used as a reference.
For example, if you are creating a new file PageMainEnhanced.qml, 
then you can probably use PageMain.qml as the alternate original
Create a file in FileSets named PageMainEnhanced.qml.ALT_ORIG
with a single line with the full path to the alternate original:
	/opt/victronenergy/qui/qml/PageMain.qml

Sometimes, a replacement file is needed in SOME versions of Venus OS but in others.
An empty file in the file set will instruct SetupHelper to use the orig,
	e.g., PageMain.qml.USE_ORIGINAL


Script Command Line Options
	The following command line options control the behavior of the script

	install - triggers installation of the package without promiting for user input
	uninstall - triggers uninstall of the pachage without user input
	reinstall - triggers reinstallation IF NEEDED
		reinstall checks installedVersion and does nothing if it's the same as the package's verison
	
	Without one of these options, the script should prompt the user for what is about to happen
		and for package options.

	auto - skips all user interactions and silences logging to the console
		This is typically used along with reinstall

	force - used along with reinstall skips the version checks
		This is mostly obsolete since the install option was added

	deferReboot - prevents the script from triggering a system reboot when exiting
	deferGuiRestart - as above for a GUI restart
	
	The defer option allow reinstallMods to reinstall all packages before rebooting the system
		Without these, each package requireing a reboot would do so, then the next package
		would install and reboot again ...

	As an example, reinstallMods includes the following options:
		reinstall auto deferReboot deferGuiRestart

	PackageManager also uses the defer... options until it has processed all packages.
		It also allows the user to defer reboots/GUI restarts when installing/uninstalling packages manually.

Script Resources

CommonResources contains functions and variables that can be used by all scripts,
    saving the setup script writer from lots of tedious work and also hooks scripts into
    the reinstall mechanism.

The tools CommonResorces provides are described now.

The following functions manage execution of the script
and interfaces to reinstallMods which is run at boot from /data/rcS.local:

	Sourcing CommonResources
		including CommonResources as described previously in your script triggers some
		automatic actions

		checks the setup script command line and the installed flag
				and sets $scriptAction based on what is found.
			Refer to the above section on command line options.

		checks the package for compatibility:
			The raspberryPiOnly flag file located in the package directory
				prevents installing on other platforms like Cerbo GX.

			A package may be suitiable for only certain versions of Venus OS
				The obsoleteVersion file in the package directory indicates
					the package should not be installed on this or newer versions
				The firstCompatibleVersion file indicates the package
					should not be installed if Venus OS is an earlier version

		If the script is running unattended,
			checks to see if options are required (optionsRequired flag file in package directory)
			and if so checks if options have previously been set (setup options/optionsSet flag file)
			if not, script exists EXIT_OPTIONS_NOT_SET


		If installing, attempts to create a file set for the current Venus OS version if it does not exist yet.
			If no file set exists and the original files match another version, the file set is created
				so the setup script may continue normally
			However, if the original files for this new version differ from all existing versions
				the new partial file set must not be used
				Flag files ares placed in the file set:
					basename.NO_REPLACEMENT indicates a new replaement verion must be created manually
					INCOMPLETE indicates the file set can not be used as-is
				scriptAction is also set to EXIT
				It is necessary for the user to create new replacement files manually
					then rerun the setup script to install the package.
					You can also revert to a previous Venus OS version until the package
						is updated for the new version.

		returns control to the main script

    endScript
        Function to finish up, prompt the user (if not reinstalling) and exit the script
        If $runningAtBoot is true (false when CommonResources is sourced)
            the script will exit with $exitReboot if $rebootNeeded is true
            otherwise, the script will exit with $exitSuccess
            endScript NEVER RETURNS to the caller
        If $runningAtBoot is false (script was run manually), user interaction controls further action
            If $rebootNeeded is true, the function asks if the user wishes to reboot now
            If they respond yes, the system will be rebooted
            The user may choose to not reboot now if additional installations need to be done first
            If $rebootNeeded is false, the function notifies the user of any needed actions
        If $restartGui is true (false when CommonResources is sourced)
            the gui service will be restarted
            
        The following variables are available to control behavior:
            $scriptAction provides direction for the setup script and has the following values:
                NONE - setup script should prompt the user for the desired action
                    and set scriptAction accordingly
                EXIT - the setup script should exit immediately
                INSTALL - the setup script should execute code to install the package
                UNINSTALL - the setup script should execute the code to restore the Venus files to stock
            If installaiton errors occur within functions in CommonResources, scriptAction will be changed to UNINSTALL.
                The setup script MUST retest scriptAction after all installation code has been executed
                so the package can be removed, rather than leaving the system with a partially installed package.

            $rebootNeeded - true signifies a reboot is required after the script is run
                if $runningAtBoot is also true, the reboot is actually performed in reinstallMods

 The following useful variables become available as well:
    $scriptDir - the full path name to the startup script
        the script's code can use this to identify the location of files that need to
        persist between reboots and through Venus OS updates
        It must be set in the setup script beause it is needed before sourcing CommonResources
    $scriptName - the basename of the setup script
    $reinstallScriptsList - the file containing a list of scripts to be run at boot to reinstall packages
        after a Venus software update
    $installedFlag - the name of the install flag files including it's full path
        User code may use these variables but should not change their value!
        It must be set in the setup script beause it is needed before sourcing CommonResources
    $venusVersion - the version of VenusOS derived from /opt/victronenergy/version
    $fileSets - the standard location for the replacement files
        equivalent to #scriptDir/FileSets
        Version-dependent replacements are stored in version subdirectories
        Version-INDEPENDENT replacements are stored in FileSets
    $pkgFileSets - is the locaiton of version-dependent files for the current Venus version
        equivalent to  $fileSets/$venusVersion
    $runningAtBoot - true if the script was called from reinstallMods (at boot time)
        signifying this is to be an unattended (automatic) installation
        CommonResoures sets this variable based on command line options
    $setupOptionsDir - the location of any files that control installation
        These options are maintained in a separate directory so reinsalling the package
        does not remove them so that a reinstall can proceed without prompting again
    $obsoleteVersion - if the package is obsolete, it can be prevented from installation
        at a specified Venus OS version

    $packageGitHubUser - specifies the GitHub user name to be used to fetch updates
    $packageGitHubBranch - specifies the branch to pull the update from
        Both of these need to be specified in the setup script to enable updates from GitHub and USB/SD media

The following functions update or restore Venus files to activate a package
they are intended to simplify common tasks, generally reducing many lines
to a single line that is easier to read/understand

The "active" file is the one used by Venus applications
It is backed up to [activeFile].orig in the same directory
Then a "replacement" file is copied into place and becomes the active file
Backups allow the stock functionality to be restored when the package is uninstalled

Replacement files are expected in the FileSets directory within the script's directory
If the replacement file content differs with VenusOS version,
subdirectories for each version hold the replacement files
If the replacment is independent of version, it can be placed in FileSets
The version subdirectories are checked first.

The version sub-directories also contain the stock files with their name ending in .orig.
These are used to look for a match within previous versions when a new Venus version is detected.
A new Venus version with matching files to a previous version updates the file sets automatically.
If the new version has different file content, replacement file(s) will need to be created MANUALLY.
This is typically easy by inspecting previous active and .orig files and the new .orig file.
The file set for the new version is flagged as INCOMPLETE and
will preven installation until the file set is complete and the INCOMPLETE flag is removed manually.

fileList contains a list of Venus files to be managed by this package. 
Packages may also contain files that do not exist in the stock Venus image.
These are NOT included in fileList!

obsoleteVersion is a file optionally contained in the package directory. 
It indicates a Venus OS version at which the package is no longer compatible. 
CommonResources prevents the package from being installed for the specified version and all those following it.

Use full paths/name for all files to avoid problems when running the script from other locations
such as the boot code, and quote them in case the names contain spaces.

Two flags are set by these routines in order for the setup script to detect changes
    $thisFileUpdated is true of the venus file was modified by the operation
        It can be tested following each update, copy or restore operation
        to determine the success/failure of that one operation
    $filesUpdates is true if ANY file is modified by any of these functions
        It can be tested at the end of the setup script to know if ANY file
        was modified to trigger restarting service or rebooting

Use updateActiveFile to replace the active file with a replacement from the package

    updateActiveFile replacementFile activeFile
        or
    updateActiveFile activeFile
         First backs up the active file
            then copies the replacement version into the active location
        If called with two parameters
            the first is replacement the file (source)
            the second is the active file (destination)
        If called with only one parameter, it specifies the active file 
            the replacement file is selected from FileSets

    restoreActiveFile activeFile
        Moves the backup copy to the active location
        The first parameter is the name of the active file (the one to be restored to stock)
        The file with the same name with .orig at the end is moved
            to the active file
        If the backup copy doesn't exist BUT the noOrig flag is set
            the active copy is deleted to restore the system to stock

    A failure in updateActiveFile and copyToActiveFile set scriptAction to UNINSTALL.
        The setup script MUST then remove the package
        to prevent system instability from a partially installed package

The following functions simplify the task of getting user input

    standardActionPrompt displays a menu of actions and asks the user to choose
        It sets scriptAction accordingly and returns
        It also handles displaying setup and package logs then asks for an action again
        It also handles quitting with no action - the fuction EXITS without returning in this case
        The basic action prompt includes install, reinstall, quit, display logs (2 choices)
        A reinstall option is enabled if the optionsSet option exists
        When reinstall is enabled, selecting install, returns a scriptAction of NONE
        indicating additional prompting may be needed to complete the install
        At the end of these prompts, the main script should set scriptAction to INSTALL
        If reinstall is selected, the script action is set to INSTALL and the main script
        should then skip additional prompts and allow options set previously to control the install

    yesNoPrompt "question"
        Asks the user to answer yes or no to the question
        Any details regarding the question should be output before calling yesNoPrompt
        yesNoPrompt sets $yesResponse to true if the answer was yes and false if the answer was no

LogHandler is a logging and log display mechanism. It is sourced by CommonResources and also by reinstallMods
    Some executions of the setup scripts are during system boot
    where console messages are likely to go unnoticed (if they are visible at all).
    Boot-time scripts that output to the console are diverted to /var/log/boot,var/log/messages or dmesg,
        but these logs retain messages only from the last boot.
    A Setup Helper log is used to make messages from these setup acivities that are more persistent and easier to find.
    The setup helper log file is /var/log/SetupHelper (or $setupLogFile)
    In addition, some packages have their own log file and logging utilities here write to these logs as well
    Finally, when run from the command line, the console (stdout) is also available and provides the most immediate
        interface to the user.
    A tai64n timestamp is added to messages written to both log files.
    This timestamp can be converted to human readable form for display tai64nlocal 
    The script name is also written to logs

    logMessage "message"
        writes "message" the above places 
            
    displayLog logfile
        displays the last 100 lines of the log file
        $1 is the log file to be displayed. Either:
            $setupLogFile or
            $packageLogFile
        The latter must be initialized in setup script code
        If no package log file exists, $packageLogFile shoudl remain null ""


Update handler
    SetupHelper checks for updates to packages from GitHub or USB/SD media.
    The GitHub updates can be automatic.
    When a package is installed, it addes the GitHub user and branch info to a file
        used by the automatic and manual updates.
    The defaultPackageList file is included in the SetupHelper package.
    The default is copied to the active location at /data/setupOptions/SetupHelper/packageList
        if it does not already exist.
    The active file can then be edited to control the updates.
    Package setup scripts should add lines to this file during installation.
    This is handled in endScript if the packageGitHubUser and packageGitHubBranch are defined in the script
    Some packages are included in defaultPackageList

    Normally, the current or latest branch is used to check for updates, but specifying a different branch
    or a specific version (of the form v2.3) can also be specified.
    
    A development branch should be used during package development to prevent affecting others using auto update.
    
    The repo version is compared with the installed version.
    
    If a version is specified for the branch, the package will be brought to that version
    regardless of what is currently installed.
    
    If any other branch name is used, an update will occur if the repo verison is numerically greater than the installed version
    
PackageList format
    The file consists of one line per package naming the package and specifying the GitHub user and branch, e.g.,

    SetupHelper         kwindrem    current

    Blank lines or those beginning with # are ignored
    A package can be manually added to this file, or updates disabled by adding a # at the beginning of the line.

packageVersions file
    packageVersions are maintained in a file and also placed in dbus Settings for display in
        the Package Versions List menu
    The reason for the duplicaiton is dbus access from unix shell scripts is very slow

    Whenever a package is installed, it compares its current version to the one in
    the /data/packageVersions file. If there is a difference dbus Settings are updated
    
    Do NOT edit this file!!!

Version numbers use the same syntax as Venus OS:
    v<major>.<minor>~<test>
    v2.45 would replace v2.45~68 as test versions lead up to an eventual release are considered
