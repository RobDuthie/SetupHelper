# CommonResources for SetupHelper
# contains a functions and variables necessary for a setup script to interface with reinstallMods
#
# Refer to the SetupHelper ReadMe file for details on how to use these resources.

######## skip to bottom of file for code executed when script is called

setupHelperDir="/data/SetupHelper"
source "$setupHelperDir/EssentialResources"
source "$setupHelperDir/LogHandler"
source "$setupHelperDir/ServiceResources"
source "$setupHelperDir/DbusSettingsResources"

# what action the script should take:
#  NONE - do noting - signals script to prompt for user input on how to proceed
#  INSTALL - install package components
#  (decommissioned) PROMPT - prompt user for additional installation options
#  UNINSTALL - remove package components
#  (decommissioned) EXIT - exit script without taking any action (now exits in-line)
# CommonResources may set the the action if initial checks
#  indicate a clear direction
# otherwise, the action will be set based on user input (in the script)
# if failures occur during installation,
# scriptAction should be changed to UNINSTALL so the installation can be cleaned up
# and the setup script should test for UNINSTALL after it attempts installation
# A file set error indicates the file set for the current verion is not usable
#  and installation should not occur
#  checkFileSets EXITS locally

scriptAction='NONE'

# flags to control setup script exit behavior
rebootNeeded=false
runAgain=false
filesUpdated=false
restartGui=false

# yesNoPrompt provides user prompting requesting a yes/no response
#
# $1 is the prompt displayed when pausing for user input
#
# $yesResponse is set to true if the response was yes

yesNoPrompt ()
{
    response=''
    while true; do
        /bin/echo -n "$*"
        read response
        case $response in
            [yY]*)
                yesResponse=true
                break
                ;;
            [nN]*)
                yesResponse=false
                break
                ;;
            *)
        esac
    done
}


# standardActionPrompt provides the standard set of options for selecting script's action
# scriptAction is set by install/uninstall
# other actions are handled locally, including quitting from the script
#
# if nonstandard prompts are necessary, duplicate this code in the setup script
# and add the additional options and do not call standardActionPrompt
#
# the reinstall option is permitted only if setup options were previously set
# if the the reinstall action is choosen, the script action is set to INSTALL
# the setup script can then test this to skip further prompts
#
# $1 indicates if there are additional prompts needed during installaiton
# if this parameter is 'MORE_PROMPTS', installaiton does NOT change scriptAction
# if this parameter does not exist, installation WILL change scriptAction to install
# this provides backaward compatibility with scripts written prior to the reinstall logic
#

standardActionPrompt ()
{
    if [ $# -gt 0 ] && [ $1 == 'MORE_PROMPTS' ]; then
        updateScriptAction=false
    else
        updateScriptAction=true
    fi

    echo
    echo "Available actions:"
    echo "  Install and activate (i)"
    if $optionsSet ; then
        echo "  Reinstall (r) based on options provided at last install"
    fi
    echo "  Uninstall (u) and restores all files to stock"
    echo "  Quit (q) without further action"
    echo "  Display setup log (s) outputs the last 100 lines of the log"
    if [ ! -z $packageLogFile ]; then
        echo "  Display Log (l) outputs the last 100 lines of the log"
    fi
    echo
    response=''
    while true; do
        /bin/echo -n "Choose an action from the list above: "
        read response
        case $response in
            [iI]*)
                if $updateScriptAction ; then
                    scriptAction='INSTALL'
                fi
                break
                ;;
            [rR]*)
                if $optionsSet ; then
                    scriptAction='INSTALL'
                    break
                fi
                ;;
            [uU]*)
                scriptAction='UNINSTALL'
                break
                ;;
            [qQ]*)
                exit $EXIT_SUCCESS
                ;;
            [lL]*)
                displayLog $packageLogFile
                ;;
            [sS]*)
                displayLog $setupLogFile
                ;;
            *)
        esac
    done
}

# backupActiveFile makes a copy of the active file in file.orig
# if the original file does not exist, no backup is made
# BUT sets a flag file that will cause restoreFile to delete the active copy
#
# $1 is the full path/file name to be backed up

backupActiveFile ()
{
    backupExisted=false
    baseName=$(basename $1)
    if [ -e "$1.orig" ] || [ -e "$1.NO_ORIG" ]; then
        mayHaveBeenUpdated=true
    elif [ ! -f "$1" ]; then
        touch "$1.NO_ORIG"
    else
        cp "$1" "$1.orig"
        rm -f "$1.NO_ORIG"
    fi
}


# updateActiveFile first backs up the active file
# then copies the replacement (aka source) to the active file location (aka destination)
#
# two variations:
#
# updateActiveFile activeFile
#   an attempt is made to locate the source (replacement)
#   in the version directory or FileSets
#
# updateActiveFile sourceFile activeFile
#   a separate source (replacement) file is specified
#     either as a full path to the actual file
#     or as the basename of a file to be found in the version directory or FileSets
#
# if the update fails, scriptAction is changed to UNINSTALL

updateActiveFile ()
{
    sourceFound=false
    thisFileUpdated=false
    
    sourceFile="$1"

    # separate replacement file specified
    if [ $# == 2 ]; then
        if [ -f "$sourceFile" ]; then
            sourceFound=true
        fi
        destinationFile="$2"
    # use active file for both source and destination
    else
        destinationFile="$1"
    fi
    
    # look for source in FileSets
    if ! $sourceFound ; then
        sourceFile="$(basename "$sourceFile")"
        # found in version directory
        if [ -f "$fileSet/$sourceFile" ]; then
            sourceFile="$fileSet/$sourceFile"
            sourceFound=true
        elif [ -f "$pkgFileSets/$sourceFile" ]; then
            sourceFile="$pkgFileSets/$sourceFile"
            sourceFound=true
        fi
    fi

    if ! $sourceFound; then
        # replacement files are not be needed for some versions
        # if so marked, leave original untouched
        if [ -f "$fileSet/$(basename $sourceFile).USE_ORIGINAL" ]; then
            return
        # if not flagged, this is a fatal error
        else
            logMessage "ERROR: no replacement file for $sourceFile"
            thisFileUpdated=false
            scriptAction='UNINSTALL'
        fi
        return
    fi
    mayHaveBeenUpdated=false
    backupActiveFile "$destinationFile"
    # package may already have been installed - check to see
    needToUpdate=true
    if $mayHaveBeenUpdated ; then
        cmp -s "$sourceFile" "$destinationFile" > /dev/null
        # already updated - no change to active file
        if [ $? == 0 ]; then
            needToUpdate=false
        fi
    fi
    if $needToUpdate ; then
        cp "$sourceFile" "$destinationFile"
        filesUpdated=true
        thisFileUpdated=true
    fi
}


# restoreActiveFile moves the backup copy to the active location
# if the backup copy doesn't exist BUT the NO_ORIG flag is set
# the active copy is deleted to restore the system to stock
# $1 is the active name, the one to be backed up

restoreActiveFile ()
{
    thisFileUpdated=false

    baseName="$(basename $1)"
    if [ -e "$1.orig" ]; then
        mv "$1.orig" "$1"
        rm -f "$1.NO_ORIG"
        filesUpdated=true
        thisFileUpdated=true
    elif [ -f "$1.NO_ORIG" ]; then
        rm -f "$1"
        rm -f "$1.NO_ORIG"
        filesUpdated=true
        thisFileUpdated=true
    fi
}


# checkFileSets validates the file sets used install package modifications
#
# It attempts to create a file set for a new Venus version
#   If the new active files for the new version all match another version
#       the new file set is populated automatically and may be used with no further action
#   If not, new version is marked for manual editing (NO_REPLACEMENT)
#       and scriptAction is set to EXIT so incompatible files are not installed
#
# Replacement files that have no original specify an "alternate original" that is used
# for version comparisons that locate an appropriate replacement

# dummy routine for backward compatibility
# the actual work is now done in-line when CommonResources is sourced

checkFileSets ()
{
    return
}

_checkFileSets ()
{
    # skip checks if uninstalling 
    if [ $scriptAction == 'UNINSTALL' ];then
        return
    fi

    # nothing to do if there is no fileList (version-dependent files)
    if [ ! -f "$pkgFileSets/fileList" ]; then
        return
    fi

	# if incomplete file set exists - remove it and try again
	if [ -f "$fileSet/INCOMPLETE" ]; then
		rm -rf $fileSet
	fi

    # attempt to create file set if it doesn't exist
    if [ ! -d "$fileSet" ]; then
        logMessage "creating file set for $venusVersion"
        mkdir "$fileSet"
    fi

    local fileList=$(cat "$pkgFileSets/fileList")
    local versionList=($(ls -d "$pkgFileSets"/v*))
    local activeFile=""
    local baseName=""
    local file=""
    
	rm -f  "$fileSet/INCOMPLETE"

    for file in $fileList ; do
        baseName=$(basename "$file")
        activeFile=$file        

        if [ -f "$pkgFileSets/$baseName.ALT_ORIG" ]; then
            activeFile=$(cat "$pkgFileSets/$baseName.ALT_ORIG")
        fi
        # package already installed, use .orig file for comparisons
        if [ -f "$activeFile.orig" ]; then
            activeFile="$activeFile.orig"
        fi

        # can't process if no Venus file
        if [ ! -f "$activeFile" ]; then
            logMessage "WARNING $venusVersion $baseName no active file"
            touch "$fileSet/$baseName.NO_ACTIVE_FILE"
            continue
        fi

        # skip checks if replacement file already exists in file set
        # or if there is no replacement file for this version
        if [ -f "$fileSet/$baseName" ] || [ -f "$fileSet/$baseName.USE_ORIGINAL" ]; then
            rm -f "$fileSet/$baseName.NO_REPLACEMENT"
            continue
        fi

        # if an active file exists
        # find the LATEST match in PREVOUS file sets
        if [ ! -z "$activeFile" ]; then
            # look for a match in another version
            matchFound=false
            # search the version list backwards so the first match is the latest one
            local i=${#versionList[@]}
            while (( i > 0 )); do
                (( i-- ))
                otherVersion=$(basename ${versionList[i]})
                versionStringToNumber $otherVersion
                otherVersionDir="$pkgFileSets/$otherVersion"
                otherFile="$pkgFileSets/$otherVersion/$baseName"

                # skip future versions
                if (( $versionNumber > $venusVersionNumber )); then
                    continue
                fi
                # skip symbolic links and nonexistent originals
                if [ ! -f "$otherFile.orig" ] || [ -L "$otherFile.orig" ] ; then
                    continue
                fi
                cmp -s "$activeFile" "$otherFile.orig" > /dev/null
                # files match
                if [ $? -eq 0 ]; then
                    matchFound=true
                    break
                fi
            done
            
            if $matchFound ;then
				if [ -e "$fileSet/$baseName.orig" ]; then
					rm -rf "$fileSet/$baseName.orig"
				fi
                ln -s "../$otherVersion/$baseName.orig" "$fileSet/$baseName.orig"
                rm -f "$fileSet/$baseName.NO_ORIG"
                # if other file set contains a replacement file, link to it
                if [ -f "$otherFile" ]; then
                    ln -s "../$otherVersion/$baseName" "$fileSet/$baseName"
                    rm -f "$fileSet/$baseName.NO_REPLACEMENT"
                    rm -f "$fileSet/$baseName.USE_ORIGINAL"
                # if other file set does not contain a replacement, this one will not either
                # this IS permitted and handled in the updateActiveFile and restoreActiveFile functions
                elif [ -f "$otherFile.USE_ORIGINAL" ]; then
                    touch "$fileSet/$baseName.USE_ORIGINAL"
                    rm -f "$fileSet/$baseName.NO_REPLACEMENT"
                fi
            # no match to a previous verison - can't create file set automatically
            # but copy original file to aid manual editing
            else
                logMessage "ERROR $venusVersion $baseName no replacement file"
                cp "$activeFile" "$fileSet/$baseName.orig"
                touch "$fileSet/$baseName.NO_REPLACEMENT"
                touch "$fileSet/INCOMPLETE"
            fi
        fi
    done

    if [ -f "$fileSet/INCOMPLETE" ]; then
        logMessage "ERROR: incomplete file set for $venusVersion - can't continue"
        exit $EXIT_FILE_SET_ERROR
    fi
}


# determine how startup script should exit based on $scriptAction and other flags
# may EXIT or REBOOT within the function - DOES NOT RETURN TO CALLER

endScript ()
{
    if [ $scriptAction == 'INSTALL' ] ; then
        # assume that if we get this far, any command line opitons have already been set
		touch "$setupOptionsDir/optionsSet"

        # set up reinstallMods to run this script again after a VenusOS update
        if [ ! -f "$reinstallScriptsList" ] || [ $(grep -c "$fullScriptName" "$reinstallScriptsList") == 0 ]; then
            logMessage "adding $shortScriptName" to $(basename "$reinstallScriptsList")
            echo "$fullScriptName" "$reinstallParam" >> "$reinstallScriptsList"
        fi
        if [ ! -f "$rcLocal" ]; then
            logMessage "creating $rcLocal"
            cat "$setupHelperDir/rcS.local" > "$rcLocal"
            chmod +x "$rcLocal"
        elif  [ $(grep -c "SetupHelper" "$rcLocal") == 0 ]; then
            logMessage "adding SetupHelper reinstall script to $rcLocal"
            sed -e '1d' "$setupHelperDir/rcS.local" >> $rcLocal
        # update reinstall call to nohup background
        elif [ $(grep -c "nohup /data/SetupHelper" "$rcLocal") == 0 ]; then
            logMessage "updating SetupHelper reinstall script in $rcLocal"
            sed -i -e 's?/data/SetupHelper?nohup /data/SetupHelper?' -e 's?reinstallMods?reinstallMods > /dev/null \&?' "$rcLocal"
        fi

        # if script needs to run again, installedVersionFile flag file is removed
        # script should run again at boot time via reinstallMods
        if $runAgain ; then
          logMessage "script will run again at startup"
            rm -f "$installedVersionFile"
        # otherwise, installation is complete - update installedVersion
        else
            cp "$scriptDir/version" "$installedVersionFile"
		fi
    elif [ $scriptAction == 'UNINSTALL' ] ; then
        # remove this script from reinstallScriptsList to prevent further calls during boot
        if [ -f "$reinstallScriptsList" ] && [ ! $(grep -c "$fullScriptName" "$reinstallScriptsList") == 0 ]; then
            logMessage removing "$shortScriptName" from $(basename "$reinstallScriptsList")    
            sed "\:$fullScriptName:d" "$reinstallScriptsList" > "$scriptDir/tmp"
            mv "$scriptDir/tmp" "$reinstallScriptsList"
        fi

        # clean up only - flag not used since package is being removed
        rm -f "$installedFlag"	# obsolete but remove it anyway
        rm -f "$installedVersionFile"
	else
		logMessage "unexpected script action $scriptAction - did not install or uninstall"
    fi

	# prioritize exit
	if $versionNotCompatible ; then
		logMessage "version not compatible - exiting"
		exit $EXIT_INCOMPATIBLE_VERSION
	elif $platformNotCompatible ; then
		logMessage "platform not compatible - exiting"
		exit $EXIT_INCOMPATIBLE_PLATFOM
	elif $rebootNeeded ; then
		if $logToConsole ; then
			yesNoPrompt "Reboot system now (y) or do it manually later (n): "
			if $yesResponse ; then
				echo "rebooting ..."
				reboot
			else
				echo "system must be rebooted to finish installation and activate components"
				exit $EXIT_REBOOT
			fi
		else
			echo "rebooting needed"
			exit $EXIT_REBOOT
		fi
	elif $restartGui ; then
		if $logToConsole ; then
			yesNoPrompt "Restart the GUI now (y) or issue a do it manually later (n): "
			if $yesResponse ; then
				echo "restarting GUI ..."
				svc -t /service/gui
				exit $EXIT_SUCCESS
			else
				echo "GUI must be restarted activate components"
				exit $EXIT_RESTART_GUI
			fi
		else
			if $deferGuiRestart ; then
				logMessage "GUI restart needed"
				exit $EXIT_RESTART_GUI
			# GUI restart NOT deferred - do it now
			else
				logMessage "restarting GUI"
				svc -t /service/gui
				exit $EXIT_SUCCESS
			fi
		fi
	else
		logMessage "completed"
		exit $EXIT_SUCCESS
	fi
}

######## this code is executed in-line when CommonResources is sourced

# check for reinstall parameter
# set $scriptAction to control work following the source command
# if "force" is also provided on the command line, then the installedVersionFile is not checked
# installedVersionFile contains the installed version (if any)
# it is compared to the version file in the package directory
#  if installedVersionFile is missing or contents are different, the installation will proceed
# if the two versions match, there is no need to reinstall the package
# we assume a reinstall is always run without benefit of a console (runningAtBoot will be true)
# so there will be no prompts and all actions will be automatic
#
# "deferReboot" signals that endScript should not reboot the system, but return EXIT_REBOOT
#	assuming the caller will evenutally reboot the system
#
# "deferGuiRestart" is similar for restarting the GUI
#
# "install" causes the package to be installed silently
# "uninstall" causes the package to be uninstalled silently
#
# command line parameters may appear in any order
#
#
# logToConsole is set to true in the LogHandler script
# It is set to false here if the command line parameters suggest
#	the setup script is being run without the aid of the command line interface
#	in which case the user will not be prompted and apprporiate actions are taken automatically
#	exit code returned by the setup script indicates additional actions that
#	need to be taken by the caller (if any) or the reason the script could not be completed

# collect command line options
reinstall=false
force=false
deferReboot=false
deferGuiRestart=false
while [ $# -gt 0 ]; do
        case $1 in
            $reinstallParam)
                reinstall=true
                logToConsole=false
                ;;
            "force")
                force=true
                ;;
            "deferReboot")
                deferReboot=true
                ;;
            "deferGuiRestart")
                deferGuiRestart=true
                ;;
            "install")
                scriptAction='INSTALL'
                logToConsole=false
                ;;
            "uninstall")
                scriptAction='UNINSTALL'
                logToConsole=false
                ;;
            *)
        esac
    shift
done

# make sure rootfs is mounted R/W
if [ -f /opt/victronenergy/swupdate-scripts/remount-rw.sh ]; then
    /opt/victronenergy/swupdate-scripts/remount-rw.sh
fi

# move old installedFlag ("...inInstalled...")
# to its new name ...installedVersionFile...
if [ ! -f "$installedVersionFile" ] && [  -f "$installedFlag" ]; then
	installedVersion=$(cat "$installedFlag")
	if [ -z $installedVersion ]; then
		installedVersion="unknown"
	else
		echo $installedVersion > "$installedVersionFile"
	fi
fi
rm -f "$installedFlag"

# packages that require options to proceed unattended
# must include the optionsRequried flag file in their package directory
# if the flag is present and options haven't been previously set,
#	SD/USB media will be checked for the package options directory
#	and copy them into position

opitonsRequiredFile="$scriptDir/optionsRequired"
optionsSet=false
if [ -f $opitonsRequiredFile ]; then
	if [ -f "$setupOptionsDir/optionsSet" ]; then
		optionsSet=true
	# options not set - check media for options if doing a blind install
	elif [ $scriptAction == 'INSTALL' ]; then
		mediaList=($(ls /media))
		for dir in ${mediaList[@]} ; do
			altSetupDir="/media/$dir/"$(basename $setupOptionsRoot)"/$packageName"
			if [ -f "$altSetupDir/optionsSet" ]; then
				cp -r "$altSetupDir" "$setupOptionsRoot"
				if [ -f "$setupOptionsDir/optionsSet" ]; then
					logMessage "options retrieved from SD/USB media"
					optionsSet=true
				fi
				break
			fi
		done
	fi

# no command line options are needed - ok to reinstall even if
#	setup was not run from the command line
else
	optionsSet=true
fi

# called from reinstallMods at boot time
if $reinstall ; then
	installedVersion=$(cat "$installedVersionFile")
	versionStringToNumber $installedVersion
	installedVersionNumber=$versionNumber
	packageVersion=$(cat "$scriptDir/version")
	versionStringToNumber $packageVersion
	packageVersionNumber=$versionNumber

    runningAtBoot=true
    if $force ; then
        scriptAction='INSTALL'
    elif [ ! -f "$installedVersionFile" ]; then
        scriptAction='INSTALL'
	# trigger install if version numbers differ
	elif (( installedVersionNumber != packageVersionNumber )); then
        scriptAction='INSTALL'
    else
        exit $EXIT_SUCCESS
    fi
    logToConsole=false

# not running from reinstallMods
else
    runningAtBoot=false
fi

# initialze integer version number for venus version
# used below and in _checkFileSets
versionStringToNumber $venusVersion
venusVersionNumber=$versionNumber

# create obsolete version file if it does not already exist
#	accommodates previous mechanism that used shell varaible
if [ ! -z $obsoleteVersion ] && [ ! -f "$scriptDir/obsoleteVersion" ]; then
	echo $obsoleteVersion > "$scriptDir/obsoleteVersion"
fi

# prevent installing Raspberry Pi packages on other platforms
platformNotCompatible=false
if [ -f "$scriptDir/raspberryPiOnly" ]; then 
	if [ -f /etc/venus/machine ]; then
		machine=$(cat /etc/venus/machine)
	fi
	if [ -z $machine ]; then
		if $isInstalled ; then
			logMessage "can't determine Venus device type - uninstalling"
			scriptAction='UNINSTALL'
		else
			logMessage "can't determine Venus device type - exiting"
			exit $INCOMPATIBLE_PLATFORM
		fi
	elif [ $machine != "raspberrypi2" ] && [ $machine != "raspberrypi4" ]; then
		platformNotCompatible=true
		if $isInstalled ; then
			logMessage "$packageName not compatible with $machine - uninstalling"
			scriptAction='UNINSTALL'
		else
			logMessage "$packageName not compatible with $machine - exiting"
			exit $EXIT_INCOMPATIBLE_PLATFOM
		fi
	fi
fi

# check to see if package is compatible with this Venus version
versionNotCompatible=false
if [ -f "$scriptDir/firstCompatibleVersion" ]; then
	firstCompatibleVersion=$(cat "$scriptDir/firstCompatibleVersion")
# no first compatible version specified - use the default
else
	firstCompatibleVersion='v2.40'
fi
versionStringToNumber $firstCompatibleVersion
firstCompatibleVersionNumber=$versionNumber
if (( $venusVersionNumber < $firstCompatibleVersionNumber )); then
	versionNotCompatible=true
elif [ -f "$scriptDir/obsoleteVersion" ]; then
	versionStringToNumber $(cat "$scriptDir/obsoleteVersion")
	obsoleteVersionNumber=$versionNumber
	if (( $venusVersionNumber >= $obsoleteVersionNumber )); then
		versionNotCompatible=true
	fi
fi
if $versionNotCompatible ; then
	# if not installed, log message and exit
	if $isInstalled ; then
		logMessage "$packageName not compatible with Venus $venusVersion - can't install"
			exit $EXIT_INCOMPATIBLE_VERSION
	else
		logMessage "$packageName not compatible with Venus $venusVersion - uninstalling"
		scriptAction='UNINSTALL'
	fi
else
	if [ ! -d "$setupOptionsRoot" ]; then
		logMessage "creating root setup options directory $setupOptionsRoot"
		mkdir $setupOptionsRoot
	fi

	if [ ! -d "$setupOptionsDir" ]; then
		logMessage "creating package options directory to $setupOptionsDir"
		mkdir $setupOptionsDir
	fi
fi

# attempting an install without the comand line prompting
#	and needed options have not been set yet
#	can't continue
if [ $scriptAction == 'INSTALL' ] && ! $optionsSet ; then
	logMessage "required options have not been set - can't install"
	exit $EXIT_OPTIONS_NOT_SET
fi
# if forcing an uninstall, skip file set checks
if [ $scriptAction != 'UNINSTALL' ]; then
    _checkFileSets
fi
