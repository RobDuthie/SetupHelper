# ServiceManager for SetupHelper
# contains a functions to install, remove, start and stop a package's service
#
# managing a normal package's service is straight forward
#
# normally, services are connected via a symbolic link, but to avoid issues with
# updating package files, the service directory is COPIED to the /service directory instead.
#
# If the active copy of the service already exists, the run and log/run files are updated
# ONLY if there are changes. This leaves other files managed by supervise untouched.
#
# For all functions, $1 specifies the service name
#
# functions that begin with _ skip checks and do not log activity



# starting with v2.80~10, services are stored in this directory which is overlayed onto /service
# all services need to be added there rather than /service
# Note: service calls (eg svc) are still made on /service/...
# there is an unknown interaction between /service and the overlay source
# so code here operates on both directories

# starting with v2.90~3, additions to /opt/victronenergy/service do not populate to /service
# a reboot is necessary !
# tempFsOverlay at least for now, new services will be copied to both places !!!!!!!!!

victronServicesDir="/opt/victronenergy/service"
overlayWorkDir="/run/overlays/service"
if [ -d "$victronServicesDir" ]; then
    serviceDir="$victronServicesDir"
    serviceOverlay=true
else
    serviceDir="/service"
    serviceOverlay=false
fi

versionStringToNumber "v2.90~3"
tempFsStartVersion=$versionNumber
versionStringToNumber $venusVersion
if  (( $versionNumber >= $tempFsStartVersion )) ; then
	tempFsOverlay=true
else
	tempFsOverlay=false
fi


# startService and stopService start and stop the service, respectively
# the 'down' flag is also cleared/set to control service runs in the future
# startService will cause the service to stop then start again !!!

_startService ()
{
    svc -d "/service/$1"
    if [ -e "$serviceDir/$1/log" ]; then
		svc -d "/service/$1/log"
	fi

    rm -f "$serviceDir/$1/down"
    if $serviceOverlay ; then
        rm -f "/service/$1/down"
    fi
    svc -u "/service/$1"
    if [ -e "$serviceDir/$1/log" ]; then
        rm -f "$serviceDir/$1/log/down"
		if $serviceOverlay ; then
			rm -f "/service/$1/log/down"
        fi
        svc -u "/service/$1/log"
    fi
}

startService ()
{
    # no service specified
    if [ $# -lt 1 ]; then
        return
    fi

    if [ -e "$serviceDir/$1" ]; then
        logMessage "starting $1 service"
        _startService $1
    fi
}


_stopService ()
{
    touch "$serviceDir/$1/down"
	if $tempFsOverlay ; then
		touch "/service/$1/down"
	fi
    svc -d "/service/$1"
    if [ -e "$serviceDir/$1/log" ]; then
        touch "$serviceDir/$1/log/down"
		if $tempFsOverlay ; then
			touch "/service/$1/log/down"
		fi
        svc -d "/service/$1/log"
    fi
}

stopService ()
{
    # no service specified
    if [ $# -lt 1 ]; then
        return
    fi

    if [ -e "$serviceDir/$1" ]; then
        logMessage "stopping $1 service"
        _stopService $1
    fi
}

#
# removeService cleanly removes the service
#

_removeService ()
{
    # stop the service
    _stopService $1

    # remove the service directory
    # removing the service in the overlayed service directory doesn't remove it from /service
    # it needs to be removed from the overlay work directory also
    rm -rf "$serviceDir/$1"
	if $tempFsOverlay ; then
		rm -rf "/service/$1"
    elif $serviceOverlay ; then
        rm -rf "$overlayWorkDir/$1"
    fi
}

removeService ()
{
    # no service specified
    if [ $# -lt 1 ]; then
        return
    fi

    if [ -e "$serviceDir/$1" ]; then
        logMessage "removing $1 service"
        _removeService $1
    fi
}


# installService adds the service to the /service directory or updates an existing one
#
# If the service does not yet exist, it will start immediately unless 
# it includes the 'down' flag file. This behavior is up to the service writer.
#
# If the service already exists, installService will stop it,
# update the service files then restart the service
#

installService ()
{
	local restartService=false
    # no service specified
    if [ $# -lt 1 ]; then
        return
    fi
    # no service to install
    if [ ! -e "$scriptDir/service" ]; then
        return
    fi

    if [ -L "$serviceDir/$1" ]; then
        logMessage "removing old $1 service (was symbolic link)"
        rm -f "$serviceDir/$1"
    fi
    # service not yet installed, COPY service directory to the active locaiton
    if [ ! -e "$serviceDir/$1" ]; then
        logMessage "installing $1 service - please wait"
		sleep 5
        cp -R "$scriptDir/service" "$serviceDir/$1"
		if $tempFsOverlay ; then
			cp -R "$scriptDir/service" "/service/$1"
		fi
    # service already installed - only copy changed files, then restart service
    else
		restartService=true
        logMessage "restarting $1 service"
        if [ -f "$scriptDir/service/run" ]; then
            cmp -s "$scriptDir/service/run" "$serviceDir/$1/run" > /dev/null
            if (( $? != 0 )); then
                cp "$scriptDir/service/run" "$serviceDir/$1/run"
				if $tempFsOverlay ; then
					cp "$scriptDir/service/run" "/service/$1/run"
				fi
            fi
        fi
        if [ -f "$scriptDir/service/log/run" ]; then
            cmp -s "$scriptDir/service/log/run" "$serviceDir/$1/log/run" > /dev/null
            if (( $? != 0 )); then
                cp "$scriptDir/service/log/run" "$serviceDir/$1/log/run"
				if $tempFsOverlay ; then
					cp "$scriptDir/service/log/run" "/service/$1/log/run"
				fi
           fi
        fi
    fi

	# restart service if was previously installed
	#	a service will start when newly installed so we don't want to restart it
	if $restartService ; then
		_startService $1
	# insure service starts up
	# with overlays, this doesn't happen if the service was removed then added again
	else
		sleep 5
		svc -u "/service/$1"
	fi
}



